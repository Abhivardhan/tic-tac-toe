{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","handleClick","value","Board","renderSquare","index","squares","clickAction","this","React","Component","Game","calculateWinner","possibilities","i","length","a","b","c","squareIndex","history","state","isPlayerXTurn","setState","concat","stepNumber","Array","fill","status","currentStateOfBoard","winner","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iPAEe,SAASA,EAAOC,GAC3B,OACI,4BAAQC,UAAY,SAASC,QAAWF,EAAMG,aACzCH,EAAMI,O,ICFEC,E,4MACjBC,aAAe,SAACC,GACZ,OACI,kBAACR,EAAD,CAAQK,MAAS,EAAKJ,MAAMQ,QAAQD,GAAQJ,YAAe,kBAAM,EAAKH,MAAMS,YAAYF,O,uDAK5F,OACI,6BACI,yBAAKN,UAAY,aACZS,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,IAEvB,yBAAKL,UAAY,aACZS,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,IAEvB,yBAAKL,UAAY,aACZS,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,S,GAvBJK,IAAMC,WCApBC,E,kDACjB,aAAe,IAAD,8BACV,gBAUJC,gBAAkB,SAACN,GAYf,IAXA,IAAMO,EAAgB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGDC,EAAI,EAAGA,EAAID,EAAcE,OAAQD,IAAK,CAAC,IAAD,cAC1BD,EAAcC,GADY,GACrCE,EADqC,KAClCC,EADkC,KAC/BC,EAD+B,KAE5C,GAAGZ,EAAQU,IAAMV,EAAQU,KAAOV,EAAQW,IAAMX,EAAQW,KAAOX,EAAQY,GACnE,OAAOZ,EAAQU,GAInB,OAAO,MA9BG,EAiCdf,YAAc,SAACkB,GACX,IAAIC,EAAU,EAAKC,MAAMD,QAErBd,EADsBc,EAAQA,EAAQL,OAAS,GACjBT,QAEnB,EAAKM,gBAAgBN,IAErBA,EAAQa,KAEvBb,EAAQa,GAAe,EAAKE,MAAMC,cAAgB,IAAM,IAExD,EAAKC,SAAS,CACVH,QAASA,EAAQI,OAAO,CACpBlB,YAEJgB,eAAgB,EAAKD,MAAMC,cAC3BG,WAAYL,EAAQL,WA/CxB,EAAKM,MAAQ,CACTC,eAAe,EACfG,WAAY,EACZL,QAAS,CACL,CAACd,QAASoB,MAAM,GAAGC,KAAK,SANtB,E,qDAqDJ,IAGFC,EAHC,OAEDC,EADUrB,KAAKa,MAAMD,QACSZ,KAAKa,MAAMI,YAEzCK,EAAStB,KAAKI,gBAAgBiB,EAAoBvB,SAWtD,OATAyB,QAAQC,IAAIxB,KAAKa,MAAMI,YAEnBG,EADDE,EACO,oBAAiBA,GACS,IAA1BtB,KAAKa,MAAMI,WACR,WAEH,yBAAqBjB,KAAKa,MAAMC,cAAgB,IAAM,KAI5D,yBAAKvB,UAAY,QACb,yBAAKA,UAAY,cACb,kBAAC,EAAD,CAAOQ,YAAe,SAACF,GAAD,OAAW,EAAKJ,YAAYI,IAAQC,QAAWuB,EAAoBvB,WAE7F,yBAAKP,UAAY,aACZ6B,Q,GA3EanB,IAAMC,WCUzBuB,G,6KAPX,OACE,kBAAC,EAAD,U,GAHYxB,IAAMC,YCQJwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.0f3a1b8a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Square(props) {\r\n    return(\r\n        <button className = \"square\" onClick = {props.handleClick}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}","import React from 'react'\r\nimport Square from './Square'\r\n\r\nexport default class Board extends React.Component {\r\n    renderSquare = (index) => {\r\n        return(\r\n            <Square value = {this.props.squares[index]} handleClick = {() => this.props.clickAction(index)}/>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <div className = \"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className = \"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className = \"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react'\r\nimport Board from './Board'\r\n\r\nexport default class Game extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            isPlayerXTurn: true,\r\n            stepNumber: 0,\r\n            history: [\r\n                {squares: Array(9).fill(null)}\r\n            ]\r\n        };\r\n    }\r\n\r\n    calculateWinner = (squares) => {\r\n        const possibilities = [\r\n          [0, 1, 2],\r\n          [3, 4, 5],\r\n          [6, 7, 8],\r\n          [0, 3, 6],\r\n          [1, 4, 7],\r\n          [2, 5, 8],\r\n          [0, 4, 8],\r\n          [2, 4, 6]\r\n        ]\r\n      \r\n        for(let i = 0; i < possibilities.length; i++) {\r\n          const [a, b, c] = possibilities[i]\r\n          if(squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\r\n            return squares[a]\r\n          }\r\n        }\r\n      \r\n        return null;\r\n    }\r\n\r\n    handleClick = (squareIndex) => {\r\n        let history = this.state.history;\r\n        let currentStateOfBoard = history[history.length - 1];\r\n        let squares = currentStateOfBoard.squares;\r\n\r\n        let isWinner = this.calculateWinner(squares);\r\n\r\n        if(isWinner || squares[squareIndex]) return;\r\n\r\n        squares[squareIndex] = this.state.isPlayerXTurn ? 'X' : 'O';\r\n\r\n        this.setState({\r\n            history: history.concat({\r\n                squares\r\n            }),\r\n            isPlayerXTurn: !this.state.isPlayerXTurn,\r\n            stepNumber: history.length\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let history = this.state.history;\r\n        let currentStateOfBoard = history[this.state.stepNumber];\r\n        let status;\r\n        let winner = this.calculateWinner(currentStateOfBoard.squares);\r\n\r\n        console.log(this.state.stepNumber);\r\n        if(winner) {\r\n            status  = `Winner is ${winner}`\r\n        } else if(this.state.stepNumber === 9) {\r\n            status = \"Game Tie\";\r\n        } else {\r\n            status = `Next player is ${this.state.isPlayerXTurn ? 'X' : 'O'}`;\r\n        }\r\n\r\n        return(\r\n            <div className = \"game\">\r\n                <div className = \"game-board\">\r\n                    <Board clickAction = {(index) => this.handleClick(index)} squares = {currentStateOfBoard.squares}/>\r\n                </div>\r\n                <div className = \"game-info\">\r\n                    {status}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport Game from './components/Game'\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Game/>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}